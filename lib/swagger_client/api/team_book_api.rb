=begin
#Team Worldwide API 2022

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 0.0.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.33
=end

module SwaggerClient
  class TeamBookApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get TeamBook accessorials.
    # Retrieves the collection of GetAccessorials resources.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse200]
    def get_get_accessorials_collection(opts = {})
      data, _status_code, _headers = get_get_accessorials_collection_with_http_info(opts)
      data
    end

    # Get TeamBook accessorials.
    # Retrieves the collection of GetAccessorials resources.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse200, Integer, Hash)>] InlineResponse200 data, response status code and response headers
    def get_get_accessorials_collection_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamBookApi.get_get_accessorials_collection ...'
      end
      # resource path
      local_var_path = '/api/team-book/get-accessorials'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/ld+json', 'application/json', 'text/html'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse200' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamBookApi#get_get_accessorials_collection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a Quote along with a reserved house bill.  Use a rateId from get-rates endpoint.
    # Retrieves a GetQuote resource.
    # @param rate_id Resource identifier
    # @param [Hash] opts the optional parameters
    # @return [GetQuoteQuoteResponseJsonld]
    def get_get_quote_item(rate_id, opts = {})
      data, _status_code, _headers = get_get_quote_item_with_http_info(rate_id, opts)
      data
    end

    # Get a Quote along with a reserved house bill.  Use a rateId from get-rates endpoint.
    # Retrieves a GetQuote resource.
    # @param rate_id Resource identifier
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetQuoteQuoteResponseJsonld, Integer, Hash)>] GetQuoteQuoteResponseJsonld data, response status code and response headers
    def get_get_quote_item_with_http_info(rate_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamBookApi.get_get_quote_item ...'
      end
      # verify the required parameter 'rate_id' is set
      if @api_client.config.client_side_validation && rate_id.nil?
        fail ArgumentError, "Missing the required parameter 'rate_id' when calling TeamBookApi.get_get_quote_item"
      end
      # resource path
      local_var_path = '/api/team-book/get-quote/{rateId}'.sub('{' + 'rateId' + '}', rate_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/ld+json', 'application/json', 'text/html'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'GetQuoteQuoteResponseJsonld' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamBookApi#get_get_quote_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get rates from the Team Book System.
    # Retrieves the collection of GetRate resources.
    # @param origin_city 
    # @param origin_state 
    # @param origin_zip_code 
    # @param origin_country 
    # @param destination_city 
    # @param destination_state 
    # @param destination_zip_code 
    # @param destination_country 
    # @param unit_of_measure Unit of Measure. Valid values: US (lbs/in) - METRIC (kgs/cm) - MIXED (kgs/cms)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :pickup_date Pickup Date. Format: YYYY-MM-DD
    # @option opts [BOOLEAN] :insurance_add_on Option to add 10% to the insurance value
    # @option opts [BOOLEAN] :insure_freight Used to tell the API to quote insurance. Your account must be setup for quoting insurance.
    # @option opts [BigDecimal] :insurance_amount This parameter refers to the extra value of &#x27;Money&#x27; type accessorials like declared value.
    # @option opts [BigDecimal] :linear_feet Linear feet value. Helpful for some volume vendors to return a rate based on space needed in a truck.
    # @option opts [String] :equipment Used for volume vendors and rates they return. Valid values: All, Van, Flatbed
    # @return [InlineResponse2001]
    def get_get_rate_collection(origin_city, origin_state, origin_zip_code, origin_country, destination_city, destination_state, destination_zip_code, destination_country, unit_of_measure, opts = {})
      data, _status_code, _headers = get_get_rate_collection_with_http_info(origin_city, origin_state, origin_zip_code, origin_country, destination_city, destination_state, destination_zip_code, destination_country, unit_of_measure, opts)
      data
    end

    # Get rates from the Team Book System.
    # Retrieves the collection of GetRate resources.
    # @param origin_city 
    # @param origin_state 
    # @param origin_zip_code 
    # @param origin_country 
    # @param destination_city 
    # @param destination_state 
    # @param destination_zip_code 
    # @param destination_country 
    # @param unit_of_measure Unit of Measure. Valid values: US (lbs/in) - METRIC (kgs/cm) - MIXED (kgs/cms)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :pickup_date Pickup Date. Format: YYYY-MM-DD
    # @option opts [BOOLEAN] :insurance_add_on Option to add 10% to the insurance value
    # @option opts [BOOLEAN] :insure_freight Used to tell the API to quote insurance. Your account must be setup for quoting insurance.
    # @option opts [BigDecimal] :insurance_amount This parameter refers to the extra value of &#x27;Money&#x27; type accessorials like declared value.
    # @option opts [BigDecimal] :linear_feet Linear feet value. Helpful for some volume vendors to return a rate based on space needed in a truck.
    # @option opts [String] :equipment Used for volume vendors and rates they return. Valid values: All, Van, Flatbed
    # @return [Array<(InlineResponse2001, Integer, Hash)>] InlineResponse2001 data, response status code and response headers
    def get_get_rate_collection_with_http_info(origin_city, origin_state, origin_zip_code, origin_country, destination_city, destination_state, destination_zip_code, destination_country, unit_of_measure, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamBookApi.get_get_rate_collection ...'
      end
      # verify the required parameter 'origin_city' is set
      if @api_client.config.client_side_validation && origin_city.nil?
        fail ArgumentError, "Missing the required parameter 'origin_city' when calling TeamBookApi.get_get_rate_collection"
      end
      # verify the required parameter 'origin_state' is set
      if @api_client.config.client_side_validation && origin_state.nil?
        fail ArgumentError, "Missing the required parameter 'origin_state' when calling TeamBookApi.get_get_rate_collection"
      end
      # verify the required parameter 'origin_zip_code' is set
      if @api_client.config.client_side_validation && origin_zip_code.nil?
        fail ArgumentError, "Missing the required parameter 'origin_zip_code' when calling TeamBookApi.get_get_rate_collection"
      end
      # verify the required parameter 'origin_country' is set
      if @api_client.config.client_side_validation && origin_country.nil?
        fail ArgumentError, "Missing the required parameter 'origin_country' when calling TeamBookApi.get_get_rate_collection"
      end
      # verify the required parameter 'destination_city' is set
      if @api_client.config.client_side_validation && destination_city.nil?
        fail ArgumentError, "Missing the required parameter 'destination_city' when calling TeamBookApi.get_get_rate_collection"
      end
      # verify the required parameter 'destination_state' is set
      if @api_client.config.client_side_validation && destination_state.nil?
        fail ArgumentError, "Missing the required parameter 'destination_state' when calling TeamBookApi.get_get_rate_collection"
      end
      # verify the required parameter 'destination_zip_code' is set
      if @api_client.config.client_side_validation && destination_zip_code.nil?
        fail ArgumentError, "Missing the required parameter 'destination_zip_code' when calling TeamBookApi.get_get_rate_collection"
      end
      # verify the required parameter 'destination_country' is set
      if @api_client.config.client_side_validation && destination_country.nil?
        fail ArgumentError, "Missing the required parameter 'destination_country' when calling TeamBookApi.get_get_rate_collection"
      end
      # verify the required parameter 'unit_of_measure' is set
      if @api_client.config.client_side_validation && unit_of_measure.nil?
        fail ArgumentError, "Missing the required parameter 'unit_of_measure' when calling TeamBookApi.get_get_rate_collection"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['US', 'METRIC', 'MIXED'].include?(unit_of_measure)
        fail ArgumentError, "invalid value for 'unit_of_measure', must be one of US, METRIC, MIXED"
      end
      if @api_client.config.client_side_validation && opts[:'equipment'] && !['All', 'Van', 'Flatbed'].include?(opts[:'equipment'])
        fail ArgumentError, 'invalid value for "equipment", must be one of All, Van, Flatbed'
      end
      # resource path
      local_var_path = '/api/team-book/get-rates'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'originCity'] = origin_city
      query_params[:'originState'] = origin_state
      query_params[:'originZipCode'] = origin_zip_code
      query_params[:'originCountry'] = origin_country
      query_params[:'destinationCity'] = destination_city
      query_params[:'destinationState'] = destination_state
      query_params[:'destinationZipCode'] = destination_zip_code
      query_params[:'destinationCountry'] = destination_country
      query_params[:'unitOfMeasure'] = unit_of_measure
      query_params[:'pickupDate'] = opts[:'pickup_date'] if !opts[:'pickup_date'].nil?
      query_params[:'insuranceAddOn'] = opts[:'insurance_add_on'] if !opts[:'insurance_add_on'].nil?
      query_params[:'insureFreight'] = opts[:'insure_freight'] if !opts[:'insure_freight'].nil?
      query_params[:'insuranceAmount'] = opts[:'insurance_amount'] if !opts[:'insurance_amount'].nil?
      query_params[:'linearFeet'] = opts[:'linear_feet'] if !opts[:'linear_feet'].nil?
      query_params[:'equipment'] = opts[:'equipment'] if !opts[:'equipment'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/ld+json', 'application/json', 'text/html'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse2001' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamBookApi#get_get_rate_collection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Gets the shipment status by house bill.
    # Retrieves the collection of GetShipmentStatus resources.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :house_bill 
    # @return [InlineResponse2004]
    def get_get_shipment_status_collection(opts = {})
      data, _status_code, _headers = get_get_shipment_status_collection_with_http_info(opts)
      data
    end

    # Gets the shipment status by house bill.
    # Retrieves the collection of GetShipmentStatus resources.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :house_bill 
    # @return [Array<(InlineResponse2004, Integer, Hash)>] InlineResponse2004 data, response status code and response headers
    def get_get_shipment_status_collection_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamBookApi.get_get_shipment_status_collection ...'
      end
      # resource path
      local_var_path = '/api/teamww/get-shipment-statuses'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'houseBill'] = opts[:'house_bill'] if !opts[:'house_bill'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/ld+json', 'application/json', 'text/html'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'InlineResponse2004' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamBookApi#get_get_shipment_status_collection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Book and dispatch a shipment in the TeamBook system.
    # Creates a BookShipment resource.
    # @param body The new BookShipment resource
    # @param [Hash] opts the optional parameters
    # @return [BookShipmentTeamBookResponseJsonld]
    def post_book_shipment_collection(body, opts = {})
      data, _status_code, _headers = post_book_shipment_collection_with_http_info(body, opts)
      data
    end

    # Book and dispatch a shipment in the TeamBook system.
    # Creates a BookShipment resource.
    # @param body The new BookShipment resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(BookShipmentTeamBookResponseJsonld, Integer, Hash)>] BookShipmentTeamBookResponseJsonld data, response status code and response headers
    def post_book_shipment_collection_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamBookApi.post_book_shipment_collection ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling TeamBookApi.post_book_shipment_collection"
      end
      # resource path
      local_var_path = '/api/team-book/book-shipment'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/ld+json', 'application/json', 'text/html'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/ld+json', 'application/json', 'text/html'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'BookShipmentTeamBookResponseJsonld' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamBookApi#post_book_shipment_collection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Book and dispatch a shipment in the TeamBook system.
    # Creates a BookShipment resource.
    # @param body The new BookShipment resource
    # @param [Hash] opts the optional parameters
    # @return [BookShipmentTeamBookResponseJsonld]
    def post_book_shipment_collection(body, opts = {})
      data, _status_code, _headers = post_book_shipment_collection_with_http_info(body, opts)
      data
    end

    # Book and dispatch a shipment in the TeamBook system.
    # Creates a BookShipment resource.
    # @param body The new BookShipment resource
    # @param [Hash] opts the optional parameters
    # @return [Array<(BookShipmentTeamBookResponseJsonld, Integer, Hash)>] BookShipmentTeamBookResponseJsonld data, response status code and response headers
    def post_book_shipment_collection_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TeamBookApi.post_book_shipment_collection ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling TeamBookApi.post_book_shipment_collection"
      end
      # resource path
      local_var_path = '/api/team-book/book-shipment'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/ld+json', 'application/json', 'text/html'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/ld+json', 'application/json', 'text/html'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'BookShipmentTeamBookResponseJsonld' 

      auth_names = opts[:auth_names] || []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TeamBookApi#post_book_shipment_collection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
