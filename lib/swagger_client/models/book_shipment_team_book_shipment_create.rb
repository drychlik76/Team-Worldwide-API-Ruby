=begin
#Team Worldwide API 2022

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 0.0.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.33
=end

require 'date'

module SwaggerClient
  # Book Team Book Shipment
  class BookShipmentTeamBookShipmentCreate
    attr_accessor :quote_id

    # Reserve a house bill from either /api/teamww/get-house-bill or get one from /api/team-book/get-quote/{rateId}
    attr_accessor :house_bill

    # Leave this null. This is used in special cases.
    attr_accessor :bol_prefix

    attr_accessor :insurance_addon

    attr_accessor :third_party_reference_number

    attr_accessor :pro_number

    attr_accessor :team_book_shipper

    attr_accessor :team_book_consignee

    attr_accessor :broker_information

    attr_accessor :instructions

    attr_accessor :shipment_notes

    # Emergency Contact. Required if a shipment has hazardous materials.
    attr_accessor :emergency_contact

    # Emergency Phone Number. Required if a shipment has hazardous materials.
    attr_accessor :emergency_phone

    # Unit of Measure. Valid values: US (lbs/in) - METRIC (kgs/cm) - MIXED (kgs/cms)
    attr_accessor :unit_of_measure

    attr_accessor :shipment_reference1

    attr_accessor :shipment_reference2

    attr_accessor :pickup

    attr_accessor :delivery

    # Array of accessorial codes. Refer to enabledAccessorials returned in /api/team-book/get-accessorials. Provide the code.
    attr_accessor :team_book_accessorials

    attr_accessor :freight

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'quote_id' => :'quoteId',
        :'house_bill' => :'houseBill',
        :'bol_prefix' => :'bolPrefix',
        :'insurance_addon' => :'insuranceAddon',
        :'third_party_reference_number' => :'thirdPartyReferenceNumber',
        :'pro_number' => :'proNumber',
        :'team_book_shipper' => :'teamBookShipper',
        :'team_book_consignee' => :'teamBookConsignee',
        :'broker_information' => :'brokerInformation',
        :'instructions' => :'instructions',
        :'shipment_notes' => :'shipmentNotes',
        :'emergency_contact' => :'emergencyContact',
        :'emergency_phone' => :'emergencyPhone',
        :'unit_of_measure' => :'unitOfMeasure',
        :'shipment_reference1' => :'shipmentReference1',
        :'shipment_reference2' => :'shipmentReference2',
        :'pickup' => :'pickup',
        :'delivery' => :'delivery',
        :'team_book_accessorials' => :'teamBookAccessorials',
        :'freight' => :'freight'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'quote_id' => :'Object',
        :'house_bill' => :'Object',
        :'bol_prefix' => :'Object',
        :'insurance_addon' => :'Object',
        :'third_party_reference_number' => :'Object',
        :'pro_number' => :'Object',
        :'team_book_shipper' => :'Object',
        :'team_book_consignee' => :'Object',
        :'broker_information' => :'Object',
        :'instructions' => :'Object',
        :'shipment_notes' => :'Object',
        :'emergency_contact' => :'Object',
        :'emergency_phone' => :'Object',
        :'unit_of_measure' => :'Object',
        :'shipment_reference1' => :'Object',
        :'shipment_reference2' => :'Object',
        :'pickup' => :'Object',
        :'delivery' => :'Object',
        :'team_book_accessorials' => :'Object',
        :'freight' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'quote_id',
        :'bol_prefix',
        :'third_party_reference_number',
        :'pro_number',
        :'broker_information',
        :'instructions',
        :'shipment_notes',
        :'emergency_contact',
        :'emergency_phone',
        :'shipment_reference1',
        :'shipment_reference2',
        :'delivery',
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::BookShipmentTeamBookShipmentCreate` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::BookShipmentTeamBookShipmentCreate`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'quote_id')
        self.quote_id = attributes[:'quote_id']
      end

      if attributes.key?(:'house_bill')
        self.house_bill = attributes[:'house_bill']
      end

      if attributes.key?(:'bol_prefix')
        self.bol_prefix = attributes[:'bol_prefix']
      end

      if attributes.key?(:'insurance_addon')
        self.insurance_addon = attributes[:'insurance_addon']
      end

      if attributes.key?(:'third_party_reference_number')
        self.third_party_reference_number = attributes[:'third_party_reference_number']
      end

      if attributes.key?(:'pro_number')
        self.pro_number = attributes[:'pro_number']
      end

      if attributes.key?(:'team_book_shipper')
        self.team_book_shipper = attributes[:'team_book_shipper']
      end

      if attributes.key?(:'team_book_consignee')
        self.team_book_consignee = attributes[:'team_book_consignee']
      end

      if attributes.key?(:'broker_information')
        self.broker_information = attributes[:'broker_information']
      end

      if attributes.key?(:'instructions')
        self.instructions = attributes[:'instructions']
      end

      if attributes.key?(:'shipment_notes')
        self.shipment_notes = attributes[:'shipment_notes']
      end

      if attributes.key?(:'emergency_contact')
        self.emergency_contact = attributes[:'emergency_contact']
      end

      if attributes.key?(:'emergency_phone')
        self.emergency_phone = attributes[:'emergency_phone']
      end

      if attributes.key?(:'unit_of_measure')
        self.unit_of_measure = attributes[:'unit_of_measure']
      else
        self.unit_of_measure = 'US'
      end

      if attributes.key?(:'shipment_reference1')
        self.shipment_reference1 = attributes[:'shipment_reference1']
      end

      if attributes.key?(:'shipment_reference2')
        self.shipment_reference2 = attributes[:'shipment_reference2']
      end

      if attributes.key?(:'pickup')
        self.pickup = attributes[:'pickup']
      end

      if attributes.key?(:'delivery')
        self.delivery = attributes[:'delivery']
      end

      if attributes.key?(:'team_book_accessorials')
        if (value = attributes[:'team_book_accessorials']).is_a?(Array)
          self.team_book_accessorials = value
        end
      end

      if attributes.key?(:'freight')
        if (value = attributes[:'freight']).is_a?(Array)
          self.freight = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @house_bill.nil?
        invalid_properties.push('invalid value for "house_bill", house_bill cannot be nil.')
      end

      if @pickup.nil?
        invalid_properties.push('invalid value for "pickup", pickup cannot be nil.')
      end

      if @freight.nil?
        invalid_properties.push('invalid value for "freight", freight cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @house_bill.nil?
      return false if @pickup.nil?
      return false if @freight.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          quote_id == o.quote_id &&
          house_bill == o.house_bill &&
          bol_prefix == o.bol_prefix &&
          insurance_addon == o.insurance_addon &&
          third_party_reference_number == o.third_party_reference_number &&
          pro_number == o.pro_number &&
          team_book_shipper == o.team_book_shipper &&
          team_book_consignee == o.team_book_consignee &&
          broker_information == o.broker_information &&
          instructions == o.instructions &&
          shipment_notes == o.shipment_notes &&
          emergency_contact == o.emergency_contact &&
          emergency_phone == o.emergency_phone &&
          unit_of_measure == o.unit_of_measure &&
          shipment_reference1 == o.shipment_reference1 &&
          shipment_reference2 == o.shipment_reference2 &&
          pickup == o.pickup &&
          delivery == o.delivery &&
          team_book_accessorials == o.team_book_accessorials &&
          freight == o.freight
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [quote_id, house_bill, bol_prefix, insurance_addon, third_party_reference_number, pro_number, team_book_shipper, team_book_consignee, broker_information, instructions, shipment_notes, emergency_contact, emergency_phone, unit_of_measure, shipment_reference1, shipment_reference2, pickup, delivery, team_book_accessorials, freight].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
