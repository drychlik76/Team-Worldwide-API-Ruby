=begin
#Team Worldwide API 2022

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 0.0.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.33
=end

require 'date'

module SwaggerClient
  # Get Rates
  class GetRateJsonld
    attr_accessor :context

    attr_accessor :id

    attr_accessor :type

    attr_accessor :unique_id

    attr_accessor :origin_city

    attr_accessor :origin_state

    attr_accessor :origin_zip_code

    attr_accessor :origin_country

    attr_accessor :destination_city

    attr_accessor :destination_state

    attr_accessor :destination_zip_code

    attr_accessor :destination_country

    attr_accessor :freight

    attr_accessor :unit_of_measure

    # Array of accessorial codes. Refer to enabledAccessorials returned in /api/team-book/get-accessorials. Provide the code.
    attr_accessor :team_book_accessorials

    attr_accessor :pickup_date

    attr_accessor :rate_type_list

    attr_accessor :equipment

    attr_accessor :insurance_add_on

    attr_accessor :insure_freight

    attr_accessor :insurance_amount

    attr_accessor :linear_feet

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'context' => :'@context',
        :'id' => :'@id',
        :'type' => :'@type',
        :'unique_id' => :'uniqueId',
        :'origin_city' => :'originCity',
        :'origin_state' => :'originState',
        :'origin_zip_code' => :'originZipCode',
        :'origin_country' => :'originCountry',
        :'destination_city' => :'destinationCity',
        :'destination_state' => :'destinationState',
        :'destination_zip_code' => :'destinationZipCode',
        :'destination_country' => :'destinationCountry',
        :'freight' => :'freight',
        :'unit_of_measure' => :'unitOfMeasure',
        :'team_book_accessorials' => :'teamBookAccessorials',
        :'pickup_date' => :'pickupDate',
        :'rate_type_list' => :'rateTypeList',
        :'equipment' => :'equipment',
        :'insurance_add_on' => :'insuranceAddOn',
        :'insure_freight' => :'insureFreight',
        :'insurance_amount' => :'insuranceAmount',
        :'linear_feet' => :'linearFeet'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'context' => :'Object',
        :'id' => :'Object',
        :'type' => :'Object',
        :'unique_id' => :'Object',
        :'origin_city' => :'Object',
        :'origin_state' => :'Object',
        :'origin_zip_code' => :'Object',
        :'origin_country' => :'Object',
        :'destination_city' => :'Object',
        :'destination_state' => :'Object',
        :'destination_zip_code' => :'Object',
        :'destination_country' => :'Object',
        :'freight' => :'Object',
        :'unit_of_measure' => :'Object',
        :'team_book_accessorials' => :'Object',
        :'pickup_date' => :'Object',
        :'rate_type_list' => :'Object',
        :'equipment' => :'Object',
        :'insurance_add_on' => :'Object',
        :'insure_freight' => :'Object',
        :'insurance_amount' => :'Object',
        :'linear_feet' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'pickup_date',
        :'rate_type_list',
        :'equipment',
        :'insurance_amount',
        :'linear_feet'
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::GetRateJsonld` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::GetRateJsonld`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'context')
        self.context = attributes[:'context']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'unique_id')
        self.unique_id = attributes[:'unique_id']
      end

      if attributes.key?(:'origin_city')
        self.origin_city = attributes[:'origin_city']
      end

      if attributes.key?(:'origin_state')
        self.origin_state = attributes[:'origin_state']
      end

      if attributes.key?(:'origin_zip_code')
        self.origin_zip_code = attributes[:'origin_zip_code']
      end

      if attributes.key?(:'origin_country')
        self.origin_country = attributes[:'origin_country']
      end

      if attributes.key?(:'destination_city')
        self.destination_city = attributes[:'destination_city']
      end

      if attributes.key?(:'destination_state')
        self.destination_state = attributes[:'destination_state']
      end

      if attributes.key?(:'destination_zip_code')
        self.destination_zip_code = attributes[:'destination_zip_code']
      end

      if attributes.key?(:'destination_country')
        self.destination_country = attributes[:'destination_country']
      end

      if attributes.key?(:'freight')
        if (value = attributes[:'freight']).is_a?(Array)
          self.freight = value
        end
      end

      if attributes.key?(:'unit_of_measure')
        self.unit_of_measure = attributes[:'unit_of_measure']
      else
        self.unit_of_measure = 'US'
      end

      if attributes.key?(:'team_book_accessorials')
        if (value = attributes[:'team_book_accessorials']).is_a?(Array)
          self.team_book_accessorials = value
        end
      end

      if attributes.key?(:'pickup_date')
        self.pickup_date = attributes[:'pickup_date']
      end

      if attributes.key?(:'rate_type_list')
        if (value = attributes[:'rate_type_list']).is_a?(Array)
          self.rate_type_list = value
        end
      end

      if attributes.key?(:'equipment')
        self.equipment = attributes[:'equipment']
      end

      if attributes.key?(:'insurance_add_on')
        self.insurance_add_on = attributes[:'insurance_add_on']
      end

      if attributes.key?(:'insure_freight')
        self.insure_freight = attributes[:'insure_freight']
      end

      if attributes.key?(:'insurance_amount')
        self.insurance_amount = attributes[:'insurance_amount']
      end

      if attributes.key?(:'linear_feet')
        self.linear_feet = attributes[:'linear_feet']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @origin_city.nil?
        invalid_properties.push('invalid value for "origin_city", origin_city cannot be nil.')
      end

      if @origin_state.nil?
        invalid_properties.push('invalid value for "origin_state", origin_state cannot be nil.')
      end

      if @origin_zip_code.nil?
        invalid_properties.push('invalid value for "origin_zip_code", origin_zip_code cannot be nil.')
      end

      if @origin_country.nil?
        invalid_properties.push('invalid value for "origin_country", origin_country cannot be nil.')
      end

      if @destination_city.nil?
        invalid_properties.push('invalid value for "destination_city", destination_city cannot be nil.')
      end

      if @destination_state.nil?
        invalid_properties.push('invalid value for "destination_state", destination_state cannot be nil.')
      end

      if @destination_zip_code.nil?
        invalid_properties.push('invalid value for "destination_zip_code", destination_zip_code cannot be nil.')
      end

      if @destination_country.nil?
        invalid_properties.push('invalid value for "destination_country", destination_country cannot be nil.')
      end

      if @freight.nil?
        invalid_properties.push('invalid value for "freight", freight cannot be nil.')
      end

      if @unit_of_measure.nil?
        invalid_properties.push('invalid value for "unit_of_measure", unit_of_measure cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @origin_city.nil?
      return false if @origin_state.nil?
      return false if @origin_zip_code.nil?
      return false if @origin_country.nil?
      return false if @destination_city.nil?
      return false if @destination_state.nil?
      return false if @destination_zip_code.nil?
      return false if @destination_country.nil?
      return false if @freight.nil?
      return false if @unit_of_measure.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          context == o.context &&
          id == o.id &&
          type == o.type &&
          unique_id == o.unique_id &&
          origin_city == o.origin_city &&
          origin_state == o.origin_state &&
          origin_zip_code == o.origin_zip_code &&
          origin_country == o.origin_country &&
          destination_city == o.destination_city &&
          destination_state == o.destination_state &&
          destination_zip_code == o.destination_zip_code &&
          destination_country == o.destination_country &&
          freight == o.freight &&
          unit_of_measure == o.unit_of_measure &&
          team_book_accessorials == o.team_book_accessorials &&
          pickup_date == o.pickup_date &&
          rate_type_list == o.rate_type_list &&
          equipment == o.equipment &&
          insurance_add_on == o.insurance_add_on &&
          insure_freight == o.insure_freight &&
          insurance_amount == o.insurance_amount &&
          linear_feet == o.linear_feet
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [context, id, type, unique_id, origin_city, origin_state, origin_zip_code, origin_country, destination_city, destination_state, destination_zip_code, destination_country, freight, unit_of_measure, team_book_accessorials, pickup_date, rate_type_list, equipment, insurance_add_on, insure_freight, insurance_amount, linear_feet].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
