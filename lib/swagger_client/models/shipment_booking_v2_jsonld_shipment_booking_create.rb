=begin
#Team Worldwide API 2022

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 0.0.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.33
=end

require 'date'

module SwaggerClient
  # Shipment Booking API Resource
  class ShipmentBookingV2JsonldShipmentBookingCreate
    attr_accessor :context

    attr_accessor :id

    attr_accessor :type

    attr_accessor :booked_date

    #           [DA] Domestic-Air,          [IA] International-Air,          [O] Ocean,          [T] Domestic/International Truck,          [TLN] Team Line Haul      
    attr_accessor :shipping_mode

    attr_accessor :carrier_name

    attr_accessor :origin_code

    attr_accessor :destination_code

    attr_accessor :vendor_code

    # Carrier master bill or booking number
    attr_accessor :carrier_booking_number

    # Secondary carrier master bill or booking number
    attr_accessor :carrier_booking_number2

    #           [S] Standard,          [X] Express,          [F] Road Feeder,          [N] Over the Counter,          [W] Weekend,          [T] Truck/Line Haul,          [E] Economy,          [H] Hot Shot,          [K] Full Truck Load,          [L] Less Than Truck Load,          [U] Exclusive Use,          [R] Live Recovery,          [C] Local      
    attr_accessor :service

    # Ship direct to consignee
    attr_accessor :direct_to_consignee

    # Override Pieces/Weight/Volume
    attr_accessor :override_measures

    # Total number of pieces
    attr_accessor :total_pieces

    # Total weight of all shipments
    attr_accessor :total_weight

    attr_accessor :departure_date

    attr_accessor :departure_time

    attr_accessor :arrival_date

    attr_accessor :arrival_time

    # The booking station or airport code.  Generally speaking it will be airport code
    attr_accessor :booking_station

    # General notes for the booking
    attr_accessor :general_notes

    # Shipments
    attr_accessor :shipments

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'context' => :'@context',
        :'id' => :'@id',
        :'type' => :'@type',
        :'booked_date' => :'bookedDate',
        :'shipping_mode' => :'shippingMode',
        :'carrier_name' => :'carrierName',
        :'origin_code' => :'originCode',
        :'destination_code' => :'destinationCode',
        :'vendor_code' => :'vendorCode',
        :'carrier_booking_number' => :'carrierBookingNumber',
        :'carrier_booking_number2' => :'carrierBookingNumber2',
        :'service' => :'service',
        :'direct_to_consignee' => :'directToConsignee',
        :'override_measures' => :'overrideMeasures',
        :'total_pieces' => :'totalPieces',
        :'total_weight' => :'totalWeight',
        :'departure_date' => :'departureDate',
        :'departure_time' => :'departureTime',
        :'arrival_date' => :'arrivalDate',
        :'arrival_time' => :'arrivalTime',
        :'booking_station' => :'bookingStation',
        :'general_notes' => :'generalNotes',
        :'shipments' => :'shipments'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'context' => :'Object',
        :'id' => :'Object',
        :'type' => :'Object',
        :'booked_date' => :'Object',
        :'shipping_mode' => :'Object',
        :'carrier_name' => :'Object',
        :'origin_code' => :'Object',
        :'destination_code' => :'Object',
        :'vendor_code' => :'Object',
        :'carrier_booking_number' => :'Object',
        :'carrier_booking_number2' => :'Object',
        :'service' => :'Object',
        :'direct_to_consignee' => :'Object',
        :'override_measures' => :'Object',
        :'total_pieces' => :'Object',
        :'total_weight' => :'Object',
        :'departure_date' => :'Object',
        :'departure_time' => :'Object',
        :'arrival_date' => :'Object',
        :'arrival_time' => :'Object',
        :'booking_station' => :'Object',
        :'general_notes' => :'Object',
        :'shipments' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'booked_date',
        :'vendor_code',
        :'carrier_booking_number',
        :'carrier_booking_number2',
        :'direct_to_consignee',
        :'override_measures',
        :'total_pieces',
        :'departure_date',
        :'departure_time',
        :'arrival_date',
        :'arrival_time',
        :'booking_station',
        :'general_notes',
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::ShipmentBookingV2JsonldShipmentBookingCreate` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::ShipmentBookingV2JsonldShipmentBookingCreate`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'context')
        self.context = attributes[:'context']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'booked_date')
        self.booked_date = attributes[:'booked_date']
      end

      if attributes.key?(:'shipping_mode')
        self.shipping_mode = attributes[:'shipping_mode']
      else
        self.shipping_mode = '[T] Domestic/International Truck'
      end

      if attributes.key?(:'carrier_name')
        self.carrier_name = attributes[:'carrier_name']
      end

      if attributes.key?(:'origin_code')
        self.origin_code = attributes[:'origin_code']
      end

      if attributes.key?(:'destination_code')
        self.destination_code = attributes[:'destination_code']
      end

      if attributes.key?(:'vendor_code')
        self.vendor_code = attributes[:'vendor_code']
      end

      if attributes.key?(:'carrier_booking_number')
        self.carrier_booking_number = attributes[:'carrier_booking_number']
      end

      if attributes.key?(:'carrier_booking_number2')
        self.carrier_booking_number2 = attributes[:'carrier_booking_number2']
      end

      if attributes.key?(:'service')
        self.service = attributes[:'service']
      else
        self.service = '[S] Standard'
      end

      if attributes.key?(:'direct_to_consignee')
        self.direct_to_consignee = attributes[:'direct_to_consignee']
      end

      if attributes.key?(:'override_measures')
        self.override_measures = attributes[:'override_measures']
      end

      if attributes.key?(:'total_pieces')
        self.total_pieces = attributes[:'total_pieces']
      end

      if attributes.key?(:'total_weight')
        self.total_weight = attributes[:'total_weight']
      end

      if attributes.key?(:'departure_date')
        self.departure_date = attributes[:'departure_date']
      end

      if attributes.key?(:'departure_time')
        self.departure_time = attributes[:'departure_time']
      end

      if attributes.key?(:'arrival_date')
        self.arrival_date = attributes[:'arrival_date']
      end

      if attributes.key?(:'arrival_time')
        self.arrival_time = attributes[:'arrival_time']
      end

      if attributes.key?(:'booking_station')
        self.booking_station = attributes[:'booking_station']
      end

      if attributes.key?(:'general_notes')
        self.general_notes = attributes[:'general_notes']
      end

      if attributes.key?(:'shipments')
        if (value = attributes[:'shipments']).is_a?(Array)
          self.shipments = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @shipping_mode.nil?
        invalid_properties.push('invalid value for "shipping_mode", shipping_mode cannot be nil.')
      end

      if @service.nil?
        invalid_properties.push('invalid value for "service", service cannot be nil.')
      end

      if @shipments.nil?
        invalid_properties.push('invalid value for "shipments", shipments cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @shipping_mode.nil?
      return false if @service.nil?
      return false if @shipments.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          context == o.context &&
          id == o.id &&
          type == o.type &&
          booked_date == o.booked_date &&
          shipping_mode == o.shipping_mode &&
          carrier_name == o.carrier_name &&
          origin_code == o.origin_code &&
          destination_code == o.destination_code &&
          vendor_code == o.vendor_code &&
          carrier_booking_number == o.carrier_booking_number &&
          carrier_booking_number2 == o.carrier_booking_number2 &&
          service == o.service &&
          direct_to_consignee == o.direct_to_consignee &&
          override_measures == o.override_measures &&
          total_pieces == o.total_pieces &&
          total_weight == o.total_weight &&
          departure_date == o.departure_date &&
          departure_time == o.departure_time &&
          arrival_date == o.arrival_date &&
          arrival_time == o.arrival_time &&
          booking_station == o.booking_station &&
          general_notes == o.general_notes &&
          shipments == o.shipments
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [context, id, type, booked_date, shipping_mode, carrier_name, origin_code, destination_code, vendor_code, carrier_booking_number, carrier_booking_number2, service, direct_to_consignee, override_measures, total_pieces, total_weight, departure_date, departure_time, arrival_date, arrival_time, booking_station, general_notes, shipments].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
