=begin
#Team Worldwide API 2022

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 0.0.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.33
=end

require 'date'

module SwaggerClient
  # Shipment API Resource
  class ShipmentV2ShipmentShipmentCreate
    # Set true if this is a live shipment
    attr_accessor :is_test_shipment

    # If your account is enabled to pre-reserve the house bill,               you must reserve a house bill from the /api/teamww/get-house-bill endpoint.  Leave this property blank and a house bill,              will be generated for you.
    attr_accessor :house_bill

    # Control branch.  Can be null.
    attr_accessor :control_branch

    #                [01] TAE,               [02] TOS,               [03] TCB,               [05] TWC,               [21] LIB,               [25] PWJ,               [27] RAV          
    attr_accessor :company

    #               [1] Domestic Air,              [2] International Air Export,              [3] International Air Import,              [4] Ocean Export (FMC),              [5] Ocean Export (NVOCC),              [6] Ocean Import (FMC),              [7] Ocean Import (NVOCC),              [8] Domestic Truck,              [19] Domestic Warehouse,              [20] Ocean Warehouse,              [21] International Warehouse,              [22] Intl Customs Brokerage,              [23] Ocean Customs Brokerage,              [24] Ocean Import (Unregulated),              [25] Ocean Export (Unregulated),              [26] International Truck Import,              [27] International Truck Export,              [30] International Truck,              [31] International Air,              [32] Ocean Unregulated          
    attr_accessor :shipment_type

    #           [D] Same Day,          [N] Over The Counter,          [A] Overnight AM,          [P] Overnight PM,          [R] International Express,          [T] International Standard,          [M] International Economy,          [O] Other,          [Q] Charter,          [S] Standard,          [2] Standard 2 (2-day),          [3] Economy (3-day),          [5] Deferred (4-5 day),          [L] LTL,          [F] FTL,          [U] EUV/Hotshot
    attr_accessor :service

    # Pickup date YYYY-MM-DD
    attr_accessor :pickup_date

    # Origin location. Must be a valid Team Worldwide origin.
    attr_accessor :origin

    # Destination location.  Must be a valid Team Worldwide destination
    attr_accessor :destination

    # Acceptable values are IN and CM
    attr_accessor :linear_units

    # Acceptable values are LB and KG
    attr_accessor :weight_units

    # Is the shipment oversize?
    attr_accessor :oversize

    # Description of the goods
    attr_accessor :goods_description

    attr_accessor :weight

    # Special instructions
    attr_accessor :special_instructions

    # Declared value
    attr_accessor :declared_value

    attr_accessor :shipper

    attr_accessor :consignee

    # Billing party of this shipment
    attr_accessor :bill_to

    # Requested pickup
    attr_accessor :requested_pickup

    # Request delivery
    attr_accessor :requested_delivery

    # Shipment goods
    attr_accessor :shipment_goods

    # Shipment goods handling
    attr_accessor :shipment_goods_handling

    # Shipment notes
    attr_accessor :shipment_notes

    # Any additional references for this shipment
    attr_accessor :additional_references

    # Projected Expenses
    attr_accessor :projected_expenses

    # Projected customer charges
    attr_accessor :projected_customer_charges

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'is_test_shipment' => :'isTestShipment',
        :'house_bill' => :'houseBill',
        :'control_branch' => :'controlBranch',
        :'company' => :'company',
        :'shipment_type' => :'shipmentType',
        :'service' => :'service',
        :'pickup_date' => :'pickupDate',
        :'origin' => :'origin',
        :'destination' => :'destination',
        :'linear_units' => :'linearUnits',
        :'weight_units' => :'weightUnits',
        :'oversize' => :'oversize',
        :'goods_description' => :'goodsDescription',
        :'weight' => :'weight',
        :'special_instructions' => :'specialInstructions',
        :'declared_value' => :'declaredValue',
        :'shipper' => :'shipper',
        :'consignee' => :'consignee',
        :'bill_to' => :'billTo',
        :'requested_pickup' => :'requestedPickup',
        :'requested_delivery' => :'requestedDelivery',
        :'shipment_goods' => :'shipmentGoods',
        :'shipment_goods_handling' => :'shipmentGoodsHandling',
        :'shipment_notes' => :'shipmentNotes',
        :'additional_references' => :'additionalReferences',
        :'projected_expenses' => :'projectedExpenses',
        :'projected_customer_charges' => :'projectedCustomerCharges'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'is_test_shipment' => :'Object',
        :'house_bill' => :'Object',
        :'control_branch' => :'Object',
        :'company' => :'Object',
        :'shipment_type' => :'Object',
        :'service' => :'Object',
        :'pickup_date' => :'Object',
        :'origin' => :'Object',
        :'destination' => :'Object',
        :'linear_units' => :'Object',
        :'weight_units' => :'Object',
        :'oversize' => :'Object',
        :'goods_description' => :'Object',
        :'weight' => :'Object',
        :'special_instructions' => :'Object',
        :'declared_value' => :'Object',
        :'shipper' => :'Object',
        :'consignee' => :'Object',
        :'bill_to' => :'Object',
        :'requested_pickup' => :'Object',
        :'requested_delivery' => :'Object',
        :'shipment_goods' => :'Object',
        :'shipment_goods_handling' => :'Object',
        :'shipment_notes' => :'Object',
        :'additional_references' => :'Object',
        :'projected_expenses' => :'Object',
        :'projected_customer_charges' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'control_branch',
        :'origin',
        :'destination',
        :'weight',
        :'special_instructions',
        :'declared_value',
        :'bill_to',
        :'requested_pickup',
        :'requested_delivery',
        :'shipment_goods',
        :'shipment_goods_handling',
        :'shipment_notes',
        :'additional_references',
        :'projected_expenses',
        :'projected_customer_charges'
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SwaggerClient::ShipmentV2ShipmentShipmentCreate` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SwaggerClient::ShipmentV2ShipmentShipmentCreate`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'is_test_shipment')
        self.is_test_shipment = attributes[:'is_test_shipment']
      end

      if attributes.key?(:'house_bill')
        self.house_bill = attributes[:'house_bill']
      end

      if attributes.key?(:'control_branch')
        self.control_branch = attributes[:'control_branch']
      end

      if attributes.key?(:'company')
        self.company = attributes[:'company']
      else
        self.company = '[01] TAE'
      end

      if attributes.key?(:'shipment_type')
        self.shipment_type = attributes[:'shipment_type']
      else
        self.shipment_type = '[8] Domestic Truck'
      end

      if attributes.key?(:'service')
        self.service = attributes[:'service']
      else
        self.service = '[3] Economy (3-day)'
      end

      if attributes.key?(:'pickup_date')
        self.pickup_date = attributes[:'pickup_date']
      end

      if attributes.key?(:'origin')
        self.origin = attributes[:'origin']
      end

      if attributes.key?(:'destination')
        self.destination = attributes[:'destination']
      end

      if attributes.key?(:'linear_units')
        self.linear_units = attributes[:'linear_units']
      else
        self.linear_units = 'IN'
      end

      if attributes.key?(:'weight_units')
        self.weight_units = attributes[:'weight_units']
      else
        self.weight_units = 'LB'
      end

      if attributes.key?(:'oversize')
        self.oversize = attributes[:'oversize']
      else
        self.oversize = 'N'
      end

      if attributes.key?(:'goods_description')
        self.goods_description = attributes[:'goods_description']
      end

      if attributes.key?(:'weight')
        self.weight = attributes[:'weight']
      end

      if attributes.key?(:'special_instructions')
        self.special_instructions = attributes[:'special_instructions']
      end

      if attributes.key?(:'declared_value')
        self.declared_value = attributes[:'declared_value']
      end

      if attributes.key?(:'shipper')
        self.shipper = attributes[:'shipper']
      end

      if attributes.key?(:'consignee')
        self.consignee = attributes[:'consignee']
      end

      if attributes.key?(:'bill_to')
        self.bill_to = attributes[:'bill_to']
      end

      if attributes.key?(:'requested_pickup')
        self.requested_pickup = attributes[:'requested_pickup']
      end

      if attributes.key?(:'requested_delivery')
        self.requested_delivery = attributes[:'requested_delivery']
      end

      if attributes.key?(:'shipment_goods')
        if (value = attributes[:'shipment_goods']).is_a?(Array)
          self.shipment_goods = value
        end
      end

      if attributes.key?(:'shipment_goods_handling')
        if (value = attributes[:'shipment_goods_handling']).is_a?(Array)
          self.shipment_goods_handling = value
        end
      end

      if attributes.key?(:'shipment_notes')
        if (value = attributes[:'shipment_notes']).is_a?(Array)
          self.shipment_notes = value
        end
      end

      if attributes.key?(:'additional_references')
        if (value = attributes[:'additional_references']).is_a?(Array)
          self.additional_references = value
        end
      end

      if attributes.key?(:'projected_expenses')
        if (value = attributes[:'projected_expenses']).is_a?(Array)
          self.projected_expenses = value
        end
      end

      if attributes.key?(:'projected_customer_charges')
        if (value = attributes[:'projected_customer_charges']).is_a?(Array)
          self.projected_customer_charges = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @company.nil?
        invalid_properties.push('invalid value for "company", company cannot be nil.')
      end

      if @shipment_type.nil?
        invalid_properties.push('invalid value for "shipment_type", shipment_type cannot be nil.')
      end

      if @service.nil?
        invalid_properties.push('invalid value for "service", service cannot be nil.')
      end

      if @pickup_date.nil?
        invalid_properties.push('invalid value for "pickup_date", pickup_date cannot be nil.')
      end

      if @linear_units.nil?
        invalid_properties.push('invalid value for "linear_units", linear_units cannot be nil.')
      end

      if @weight_units.nil?
        invalid_properties.push('invalid value for "weight_units", weight_units cannot be nil.')
      end

      if @goods_description.nil?
        invalid_properties.push('invalid value for "goods_description", goods_description cannot be nil.')
      end

      if @shipper.nil?
        invalid_properties.push('invalid value for "shipper", shipper cannot be nil.')
      end

      if @consignee.nil?
        invalid_properties.push('invalid value for "consignee", consignee cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @company.nil?
      return false if @shipment_type.nil?
      return false if @service.nil?
      return false if @pickup_date.nil?
      return false if @linear_units.nil?
      return false if @weight_units.nil?
      return false if @goods_description.nil?
      return false if @shipper.nil?
      return false if @consignee.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          is_test_shipment == o.is_test_shipment &&
          house_bill == o.house_bill &&
          control_branch == o.control_branch &&
          company == o.company &&
          shipment_type == o.shipment_type &&
          service == o.service &&
          pickup_date == o.pickup_date &&
          origin == o.origin &&
          destination == o.destination &&
          linear_units == o.linear_units &&
          weight_units == o.weight_units &&
          oversize == o.oversize &&
          goods_description == o.goods_description &&
          weight == o.weight &&
          special_instructions == o.special_instructions &&
          declared_value == o.declared_value &&
          shipper == o.shipper &&
          consignee == o.consignee &&
          bill_to == o.bill_to &&
          requested_pickup == o.requested_pickup &&
          requested_delivery == o.requested_delivery &&
          shipment_goods == o.shipment_goods &&
          shipment_goods_handling == o.shipment_goods_handling &&
          shipment_notes == o.shipment_notes &&
          additional_references == o.additional_references &&
          projected_expenses == o.projected_expenses &&
          projected_customer_charges == o.projected_customer_charges
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [is_test_shipment, house_bill, control_branch, company, shipment_type, service, pickup_date, origin, destination, linear_units, weight_units, oversize, goods_description, weight, special_instructions, declared_value, shipper, consignee, bill_to, requested_pickup, requested_delivery, shipment_goods, shipment_goods_handling, shipment_notes, additional_references, projected_expenses, projected_customer_charges].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        SwaggerClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
